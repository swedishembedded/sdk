#!/bin/bash

# abort on error (note that this is only a fallback. You should still check
# return codes every single time!)
# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2022 Martin Schr√∂der <info@swedishembedded.com>
# Consulting: https://swedishembedded.com/go
# Training: https://swedishembedded.com/tag/training

set -e

# Install apt packages (-qy means quet and say yes on all interactive questions)
apt-get -qy update

# This is a workaround for tzdata installation (so it doesn't hang pipeline)
if [[ ! -z "${CI_JOB_TOKEN}" ]]; then
	TZ=America/Los_Angeles
	ln -snf "/usr/share/zoneinfo/$TZ" /etc/localtime
	echo "$TZ" > /etc/timezone
fi

# If we don't have sudo user (ie in docker) then we assume root
if [[ -z "${SUDO_USER}" ]]; then
	export SUDO_USER="root"
fi

# Based on the docker image script
# When updating this script, consult the docker script
ZSDK_VERSION=0.14.2
DOXYGEN_VERSION=1.9.4
CMAKE_VERSION=3.20.5
RENODE_VERSION=1.13.0
LLVM_VERSION=12
BSIM_VERSION=v1.0.3
WGET_ARGS="-q --show-progress --progress=bar:force:noscroll --no-check-certificate"

# Set non-interactive frontend for apt-get to skip any user confirmations
DEBIAN_FRONTEND=noninteractive

# Install base packages
apt-get -y update && \
	apt-get -y upgrade && \
	apt-get install --no-install-recommends -y \
		software-properties-common \
		lsb-release \
		autoconf \
		automake \
		bison \
		build-essential \
		ca-certificates \
		ccache \
		chrpath \
		cpio \
		device-tree-compiler \
		dfu-util \
		diffstat \
		dos2unix \
		doxygen \
		file \
		flex \
		g++ \
		gawk \
		gcc \
		gcovr \
		git \
		git-core \
		gnupg \
		gperf \
		gtk-sharp2 \
		help2man \
		iproute2 \
		lcov \
		libglib2.0-dev \
		libgtk2.0-0 \
		liblocale-gettext-perl \
		libncurses5-dev \
		libpcap-dev \
		libpopt0 \
		libsdl1.2-dev \
		libsdl2-dev \
		libssl-dev \
		libtool \
		libtool-bin \
		locales \
		make \
		net-tools \
		ninja-build \
		openssh-client \
		pkg-config \
		protobuf-compiler \
		python3-dev \
		python3-pip \
		python3-ply \
		python3-setuptools \
		python-is-python3 \
		qemu \
		rsync \
		socat \
		srecord \
		sudo \
		texinfo \
		unzip \
		valgrind \
		wget \
		ovmf \
		xz-utils \
		bc

# Install multi-lib gcc (x86 only)
if [ "${HOSTTYPE}" = "x86_64" ]; then \
apt-get install --no-install-recommends -y \
	gcc-multilib \
	g++-multilib \
; fi

# Install i386 packages (x86 only)
#if [ "${HOSTTYPE}" = "x86_64" ]; then \
#	dpkg --add-architecture i386 && \
#	apt-get -y update && \
#	apt-get -y upgrade && \
#	apt-get install --no-install-recommends -y \
#		libsdl2-dev:i386 \
#; fi

# Initialise system locale
locale-gen en_US.UTF-8
#LANG=en_US.UTF-8
#LANGUAGE=en_US:en
#LC_ALL=en_US.UTF-8

# Install Doxygen (x86 only)
# NOTE: Pre-built Doxygen binaries are only available for x86_64 host.
if [ "${HOSTTYPE}" = "x86_64" ]; then \
	wget ${WGET_ARGS} https://downloads.sourceforge.net/project/doxygen/rel-${DOXYGEN_VERSION}/doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz && \
	tar xf doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz -C /opt && \
	ln -s /opt/doxygen-${DOXYGEN_VERSION}/bin/doxygen /usr/local/bin && \
	rm doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz \
; fi

# Install CMake
wget ${WGET_ARGS} https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-${HOSTTYPE}.sh && \
	chmod +x cmake-${CMAKE_VERSION}-Linux-${HOSTTYPE}.sh && \
	./cmake-${CMAKE_VERSION}-Linux-${HOSTTYPE}.sh --skip-license --prefix=/usr/local && \
	rm -f ./cmake-${CMAKE_VERSION}-Linux-${HOSTTYPE}.sh

# Install renode (x86 only)
# NOTE: Renode is currently only available for x86_64 host.
if [ "${HOSTTYPE}" = "x86_64" ]; then \
	apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
	echo "deb https://download.mono-project.com/repo/ubuntu stable-bionic main" | tee /etc/apt/sources.list.d/mono-official-stable.list && \
	apt-get -y update && \
	wget ${WGET_ARGS} https://github.com/renode/renode/releases/download/v${RENODE_VERSION}/renode_${RENODE_VERSION}_amd64.deb && \
	apt-get install -y ./renode_${RENODE_VERSION}_amd64.deb && \
	rm renode_${RENODE_VERSION}_amd64.deb \
; fi

# Install Python dependencies
pip3 install wheel pip -U &&\
	pip3 install -r https://raw.githubusercontent.com/zephyrproject-rtos/zephyr/master/scripts/requirements.txt && \
	pip3 install -r https://raw.githubusercontent.com/zephyrproject-rtos/mcuboot/master/scripts/requirements.txt && \
	pip3 install west &&\
	pip3 install sh &&\
	pip3 install awscli PyGithub junitparser pylint \
			 statistics numpy \
			 imgtool \
			 protobuf \
			 GitPython

# Install BSIM
mkdir -p /opt/bsim && \
	cd /opt/bsim && \
	rm -f repo && \
	wget ${WGET_ARGS} https://storage.googleapis.com/git-repo-downloads/repo && \
	chmod a+x ./repo && \
	python3 ./repo init -u https://github.com/BabbleSim/manifest.git -m zephyr_docker.xml -b ${BSIM_VERSION} --depth 1 &&\
	python3 ./repo sync && \
	make everything -j 8 && \
	echo ${BSIM_VERSION} > ./version && \
	chmod ag+w . -R

# Install uefi-run utility
wget ${WGET_ARGS} https://static.rust-lang.org/rustup/rustup-init.sh && \
	chmod +x rustup-init.sh && \
	./rustup-init.sh -y && \
	. $HOME/.cargo/env && \
	cargo install uefi-run --root /usr && \
	rm -f ./rustup-init.sh

# Install LLVM and Clang
wget ${WGET_ARGS} -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
	apt-get update && \
	apt-get install -y clang-$LLVM_VERSION lldb-$LLVM_VERSION lld-$LLVM_VERSION clangd-$LLVM_VERSION llvm-$LLVM_VERSION-dev

# Install Zephyr SDK
mkdir -p /opt/toolchains && \
	cd /opt/toolchains && \
	wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZSDK_VERSION}/zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}.tar.gz && \
	tar xf zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}.tar.gz && \
	./zephyr-sdk-${ZSDK_VERSION}/setup.sh -t all -h -c && \
	rm zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}.tar.gz

# Install additional python packages
pip3 install \
	cmakelang \
	click \
	clang==12.0.1 \
	black==22.3.0 \
	robotframework==4.0.1

# Install additional apt packages
# Dependencies for documentation generation
apt-get update && \
	apt-get -qy install --no-install-recommends \
	doxygen doxygen-latex dot2tex  \
	librsvg2-bin \
	texlive-latex-base \
	texlive-latex-extra \
	latexmk \
	texlive-fonts-recommended \
	ruby bundler

# Dependencies for asciidoc pdf generation
apt-get update && \
	apt-get -qy install --no-install-recommends \
	curl aspell aspell-en && \
	curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && \
	apt-get update && \
	apt-get -qy install --no-install-recommends \
		nodejs

gem install \
	asciidoctor-pdf

# Ruby dependencies for CMock
gem install \
	bundler \
	rake \
	manifest \
	require_all \
	constructor \
	diy

# Dependencies for code checking
apt-get update && \
	apt-get -qy install --no-install-recommends \
	clang-format libclang-12-dev

# Dependencies for ledger
apt-get update && \
	apt-get -qy install --no-install-recommends \
	ledger

# Dependencies for image tests
apt-get update && \
	apt-get -qy install --no-install-recommends \
	imagemagick

# Dependencies for control and simulation
apt-get update && \
	apt-get -qy install --no-install-recommends \
	octave

# Clean up stale packages
apt-get clean -y && \
	apt-get autoremove --purge -y

# Install sdk for the user running this script using sudo
sudo -u $SUDO_USER /opt/toolchains/zephyr-sdk-${ZSDK_VERSION}/setup.sh -t all -h -c

# Set the locale
export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
export OVMF_FD_PATH=/usr/share/ovmf/OVMF.fd
